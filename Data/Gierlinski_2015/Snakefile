# ==============================================================================
# Configuration
# ==============================================================================
import pandas as pd
import os.path as path

CONFIG = pd.read_csv(
    "config.tsv",
    index_col=False,
    sep="\t"
)
SAMPLES = CONFIG.loc[:, "sample"].tolist()
LANES = list(range(1, 8))

DIR = {
    "rpt": "Reports",
    "fastq": "FASTQs",
    "align": "Aligned",
}

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join(DIR["rpt"], "{sample}_{lane}_fastqc.{ext}"),
            sample=SAMPLES,
            lane=LANES,
            ext=["html", "zip"],
        ),
        path.join(DIR["rpt"], "multiqc_report.html"),
        expand(
            path.join(DIR["align"], "{sample}", "abundance.tsv"),
            sample=SAMPLES
        ),
        path.join("Sleuth", "genes.tsv"),
        path.join("Sleuth", "sleuth-object.rds"),
        path.join("Plots", "p-values.genes.png"),
        path.join("Plots", "volcano.png"),

# ==============================================================================
# Rules
# ==============================================================================
rule download:
    output:
        path.join(DIR["fastq"], "{sample}_{lane}.fastq.gz"),
    params:
        # select the ERA Run ID that matches this sample and lane
        run = lambda wildcards: CONFIG.loc[(CONFIG["sample"] == wildcards.sample) & (CONFIG["lane"] == int(wildcards.lane)), "run_accession"].values[0],
        pre = lambda wildcards: CONFIG.loc[(CONFIG["sample"] == wildcards.sample) & (CONFIG["lane"] == int(wildcards.lane)), "run_accession"].values[0][0:6],
    shell:
        "wget -O {output} ftp://ftp.sra.ebi.ac.uk/vol1/fastq/{params.pre}/{params.run}/{params.run}.fastq.gz"

rule fastqc:
    input:
        path.join(DIR["fastq"], "{sample}_{lane}.fastq.gz"),
    output:
        path.join(DIR["rpt"], "{sample}_{lane}_fastqc.zip"),
        path.join(DIR["rpt"], "{sample}_{lane}_fastqc.html"),
    params:
        outdir = DIR["rpt"]
    shell:
        "fastqc -o {params.outdir} {input}"

rule multiqc:
    input:
        expand(
            path.join(DIR["rpt"], "{sample}_{lane}_fastqc.{ext}"),
            sample=SAMPLES,
            lane=LANES,
            ext=["html", "zip"],
        ),
        expand(
            path.join(DIR["rpt"], "{sample}.kallisto_report.txt"),
            sample=SAMPLES,
        ),
    output:
        path.join(DIR["rpt"], "multiqc_report.html"),
    params:
        outdir = DIR["rpt"]
    shell:
        "multiqc -f -o {params.outdir} {params.outdir}"

rule kallisto:
    input:
        fq = expand(
            path.join(DIR["fastq"], "{{sample}}_{lane}.fastq.gz"),
            lane=range(1, 8),
        ),
        idx = path.join("..", "Kallisto_s-cerevisiae_Index", "transcriptome.idx"),
    output:
        rpt = path.join(DIR["rpt"], "{sample}_kallisto.txt"),
        tsv = path.join(DIR["align"], "{sample}", "abundance.tsv"),
        abd = path.join(DIR["align"], "{sample}", "abundance.h5"),
        run = path.join(DIR["align"], "{sample}", "run_info.json"),
    params:
        "-b 100 -t 8 --verbose --single -l 300 -s 10"
    shell:
        "kallisto quant {params} -i {input.idx} -o Aligned/{wildcards.sample} {input.fq} > {output.rpt}"

rule sleuth:
    input:
        script = "sleuth.R",
        data = expand(
            path.join(DIR["align"], "{sample}", "abundance.tsv"),
            sample=SAMPLES
        ),
    output:
        path.join("Sleuth", "genes.tsv"),
        path.join("Sleuth", "sleuth-object.rds"),
        path.join("Plots", "p-values.genes.png"),
        path.join("Plots", "volcano.png"),
    shell:
        "Rscript {input.script}"

