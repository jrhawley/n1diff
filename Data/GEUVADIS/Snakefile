# ==============================================================================
# Configuration
# ==============================================================================
import pandas as pd
import os.path as path

CONFIG = pd.read_csv(
    "config.tsv",
    index_col=False,
    sep="\t"
)
SAMPLES = CONFIG.loc[:, "Comment[ENA_RUN]"].tolist()

DIR = {
    "fastq": "FASTQs",
    "align": "Aligned",
}

# ==============================================================================
# Meta Rules
# ==============================================================================
rule all:
    input:
        expand(
            path.join(DIR["align"], "{sample}", "abundance.tsv"),
            sample=SAMPLES
        )

# ==============================================================================
# Rules
# ==============================================================================
rule download:
    output:
        path.join(DIR["fastq"], "{sample}_1.fastq.gz"),
        path.join(DIR["fastq"], "{sample}_2.fastq.gz"),
    shell:
        "pushd FASTQs; wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/{wildcards.sample}/{wildcards.sample}_{{1,2}}.fastq.gz; popd;"

rule kallisto:
    input:
        fq1 = path.join(DIR["fastq"], "{sample}_1.fastq.gz"),
        fq2 = path.join(DIR["fastq"], "{sample}_2.fastq.gz"),
        idx = path.join("..", "Kallisto_GRCh38_Index", "transcriptome.idx"),
    output:
        path.join(DIR["align"], "{sample}", "abundance.tsv"),
        path.join(DIR["align"], "{sample}", "abundance.h5"),
        path.join(DIR["align"], "{sample}", "run_info.json"),
    params:
        "-b 100 -t 8 --verbose"
    shell:
        "kallisto quant {params} -i {input.idx} -o Aligned/{wildcards.sample} {input.fq1} {input.fq2}"
